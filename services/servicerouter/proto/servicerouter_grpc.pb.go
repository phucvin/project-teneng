// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: servicerouter.proto

package servicerouter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceRouterClient is the client API for ServiceRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceRouterClient interface {
	// Invokes a request.
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error)
}

type serviceRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRouterClient(cc grpc.ClientConnInterface) ServiceRouterClient {
	return &serviceRouterClient{cc}
}

func (c *serviceRouterClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error) {
	out := new(InvokeResponse)
	err := c.cc.Invoke(ctx, "/servicerouter.ServiceRouter/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRouterServer is the server API for ServiceRouter service.
// All implementations must embed UnimplementedServiceRouterServer
// for forward compatibility
type ServiceRouterServer interface {
	// Invokes a request.
	Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error)
	mustEmbedUnimplementedServiceRouterServer()
}

// UnimplementedServiceRouterServer must be embedded to have forward compatible implementations.
type UnimplementedServiceRouterServer struct {
}

func (UnimplementedServiceRouterServer) Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedServiceRouterServer) mustEmbedUnimplementedServiceRouterServer() {}

// UnsafeServiceRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRouterServer will
// result in compilation errors.
type UnsafeServiceRouterServer interface {
	mustEmbedUnimplementedServiceRouterServer()
}

func RegisterServiceRouterServer(s grpc.ServiceRegistrar, srv ServiceRouterServer) {
	s.RegisterService(&ServiceRouter_ServiceDesc, srv)
}

func _ServiceRouter_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRouterServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicerouter.ServiceRouter/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRouterServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceRouter_ServiceDesc is the grpc.ServiceDesc for ServiceRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicerouter.ServiceRouter",
	HandlerType: (*ServiceRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _ServiceRouter_Invoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicerouter.proto",
}
